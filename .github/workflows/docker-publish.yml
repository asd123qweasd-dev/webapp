name: Docker

on:
  push:
    branches:
      - master
      - alpha
    tags:
      - v*
  pull_request:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Run tests
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run sut
  #         else
  #           docker build . --file Dockerfile
  #         fi
  push:
    # needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: |
          GITHUB_REF=$(echo ${GITHUB_REF#refs/heads/})
          echo GITHUB_REF
          echo "##[set-output name=branch;]$GITHUB_REF"
        id: extract_branch

      # - name: Build image
      #   run: |
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     [ "$VERSION" == "master" ] && VERSION=latest
      #     [ "$VERSION" == "alpha" ] && VERSION=alpha
      #     GITHUB_REF=${{ steps.extract_branch.outputs.branch }}
      #     echo VERSION=$VERSION
      #     echo GITHUB_REF=$GITHUB_REF
      #     docker build . --file Dockerfile --build-arg NEXT_PUBLIC_APP_VERSION=$VERSION --build-arg NEXT_PUBLIC_APP_REF=$GITHUB_REF --tag $IMAGE_NAME

      # - name: Log into registry
      #   run: echo "${{ secrets.PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # - name: Push image
      #   run: |
      #     IMAGE_ID=$IMAGE_NAME
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     [ "$VERSION" == "master" ] && VERSION=latest
      #     [ "$VERSION" == "alpha" ] && VERSION=alpha
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION
      #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION
